/**
\mainpage Graphical Flowchart Configuration Editor
This project serves to provide an interface to edit parameterfiles which can
be used to configure parameters of objects, algorithms or other data structures.
It is designed to simplify the configuration of flow estimation algorithms in
the Charon project. Easy handling and prevention of errors which could occur
on paremeterfile creation by hand are the main goals.

\section intro Introduction
The interaction between objects, algorithms etc. can often be visualized
using flowchart diagrams (similar to UML collaboration diagrams).
The main application of this project is able to create, show and to edit such
a flowchart generated from a parameter file that can be parsed by other
applications to configure or create the corresponding structures.

\image html flow1.png "Sample flowchart generated by ParamEdit"
\image latex flow1.png "Sample flowchart generated by ParamEdit" width=10cm

The parameters for each object are shown in an object inspector and can be
manipulated there.

Attention has been given to the documentation of the flowchart objects and
parameters. The parameter documentation is shown as tooltips in the object
inspector, the class documentation for avaiable node types is shown in the
help browser. Clicking on a class in the selector widget, the corresponding
documentation is shown.

\image html screenshot.png "ParamEdit screenshot"
\image latex screenshot.png "ParamEdit screenshot" width=0.95\textwidth

\section features Features
-   look and feel similar to other graphical IDEs (LabView, QT Designer, ...)
-   the graphical flowchart, which is easier to understand than the plain
    config file, gives an overview of the data interaction
-   documentation is always present on screen to help new users
-   dock widgets can be rearranged or hidden to adapt to the user's needs
-   mouse navigation or keyboard shortcuts for advanced users
-   the user's attention is focussed on the objects and parameter configuration
    and not on syntax details and searching the needed documentation
-   the connectable item filter speeds up finding the needed object
-   multiple configuration can be opened at the same time and be
    compared this way
-   flowchart images can be saved and used e.g. for presentations or
    documentation which is more intuitive than the parameter
    configuration itself
-   Object/class information (so called metadata) are stored in a separate file.
    This way it's possible to configure visualizable processes in many different
    projects/applications.

\section visualization Flowchart visualization
The nodes in the flowchart representation consist of three segments.
In the first row, the object type is shown. In the second row, you can see the
name of this object. In the selector widget, there are node templates
that can be used to create new nodes in the flowchart by drag&drop or by
double-click. These objects are (yet) unnamed, so the second row is empty.
The rows below type and name represent the input and output slots.
Input slots are shown at the left side, outputs at the right side.
The slot name is shown inside the corresponding box, the slot (data) type is not
shown.

If there exists a connection between some slots, it is represented by an
arrow going from the source (output) slot to the target (input) slot.
The exchanged data type is shown as an arrow label.

\section store Flowchart and class representation in files
The flowchart information and modified parameters are stored in a parameter file
which can be used by any other project to instanciate the object structures.
The way the information is stored there, can be found \ref paramgraph "below".

All information about the node types and connection possibilities in the
flowcharts is stored in a so called metadata file. This file represents the
avaiable (node) classes and their interaction possibilities.
You can edit this file or create a new one to be able to configure your own
flowchart class structures. The file format description can be found
\ref metadata "below".

\section used Used software
The whole project is written in C++ and designed to be platform independent.
It uses only free (Open Source) software which is also avaiable for multiple
platforms. The software has been tested on Linux (2.6)
and Windows (XP, Server 2003, Vista, Server 2008).
The used libraries are avaiable for MAC OS too.

This is a list of the used libraries and software:
-   The <a href="http://cmake.org/">CMake</a> cross plattform build
    system creates the project build files used by make/Eclipse/MSVC etc.
    (Version >= 2.6.0)<br>
    License: <a href="http://www.cmake.org/cmake/project/license.html">Berkely-style</a>
-   the GUI is created using the
    <a href="http://www.qtsoftware.com/products/appdev">QT library</a>
    (Version >= 4.5.0)<br>
    License: <a href="http://www.qtsoftware.com/products/licensing">LGPL</a>
-   graph/flowchart creation is managed by
    <a href="http://www.graphviz.org/">graphviz</a> (Version >= 2.22)<br>
    License: <a href="http://www.graphviz.org/License.php">Common Public License</a>
-   icons from the Oxygen icon set from the
    <a href="http://websvn.kde.org/trunk/KDE/kdebase/runtime/pics/oxygen/">
    KDE Project</a><br>
    License: <a href="http://websvn.kde.org/*checkout*
    /trunk/KDE/kdebase/runtime/pics/oxygen/COPYING">LGPL</a>
-   documentation generated using <a href="http://www.doxygen.org">Doxygen</a> (Version >= 1.5.7)<br>
    License: <a href="http://www.doxygen.org">GPL</a> (this does not affect the documentation output)

\section future Future plans
The software has not been integrated into the Charon project yet, so the wishlist
of features will surely grow in future. Here are some ideas which are not
absolutely necessary but would improve or speed up the capabilities in flow
chart editing and configuration:
-   possibility to hide or collapse parts of the flow chart in order to focus on
    the relevant parts which your are working on
-   automatically metadata generation out of existing class structures
    (possibly based on Doxygen generated XML files or auto generated during
    instantiation of parametered objects)
-   avoiding creation of temporary files on graph visualization
    (which leads to some strange bugs using MinGW on Win XP)
-   interaction with the Argos project to edit and visualize the
    filter configurations
-   fix bugs end errors that may show up on daily use

\section license License
Copyright (C) 2009 Jens-Malte Gottfried

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see http://www.gnu.org/licenses/.

\image html  lgplv3-147x51.png "LGPL logo"
\image latex lgplv3-147x51.png "LGPL logo" width=4cm

\section infos Further information
- \subpage build
- \subpage usage
- \subpage paramgraph
- \subpage metadata

\latexonly
The API documentation is only avaiable in the HTML version of this documentation.
\pagebreak
\endlatexonly
*/
