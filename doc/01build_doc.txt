/**
\page tuchulcha-build Project build
This Project uses the CMake Makefile generator to manage the build process
for various build tools. 

\section config Configure
To create the build files, run CMake (at least Version 2.6)
on the project root directory and select the desired Makefile
generator. More information about this step can be found at the
<a href="http://www.cmake.org/HTML/Documentation.html">
CMake Documentation Website</a>.

\subsection in-out-of-source In and out-of-source builds
You can use in-source or out-of-source-builds. The advantage of in-source-builds
is that you have all files (sources and binaries) in the same directories, but
this makes it difficult to keep svn ignore lists etc. up to date.
Source packages will be messed up too (see below).
To keep the source directories clean, you can use out-of-source build
which means that you create a second folder where binaries and tempoary files
will be stored. It is possible to create multiple build directories
where you can use different build systems (MinGW/MSVC/...)
or different compiler settings.

If you use the CMake GUI, you have to specify <b>two</b>
directories, the source and the build directory. If these are the same, you
perform a in-source-build, if you select two different directories, the
source directory will be kept clean.

\subsection environments Testet build environments
-   Linux gcc >= 4.1
-   Win32 gcc (mingw >= 4.3)
-   Win32 Microsoft Visual Studio 2005, 2008

Useful hints:

For Windows users, there are two different Graphviz binaries avaiable:
-   Graphviz compiled with Visual Studio (e.g.
	<a href="http://www.graphviz.org/pub/graphviz/development/windows/
	graphviz-2.22.msi">graphviz-mingw-2.22.msi</a>)
-	Graphviz compiled with MinGW (e.g. file <a href="http://www.graphviz.org/pub/graphviz/
	development/windows/graphviz-mingw-2.23.20090306.2213.msi">
	graphviz-mingw-2.23.20090306.2213.msi</a>).

These files can be found on the
<a href="http://www.graphviz.org/Download_windows.php">graphiz download page</a>

\subsection cflags Compiler flags
When using the <b>GNU gcc compiler</b>, some compiler flags are are very useful
for debugging. The used flags can be modified in the CMake Cache editor.
The simplest way is using the CMake GUI. Don't forget to select the advanced or
grouped view to be able to change the settings mentioned below.

The recommended flags for \c CMAKE_CXXFLAGS and \c CMAKE_CFLAGS are:
-	-Wno-attributes: Suppress warnings about dllimports
    (only on Windows gcc version >= 4.0)
-	-W -Wall -Wextra -Wshadow: Activate many compiler warnings
-   -pipe: try to avoid creation of temporary files (linux)

You can specify a project build type (Debug, Release, ...) using the
CMake Cache editor.

Recommended settings for <tt>CMAKE_C(XX)FLAGS_DEBUG</tt>:
-	-g3 -O0: Add debug symbols and deactivate optimization

Recommended settings for <tt>CMAKE_C(XX)FLAGS_RELEASE</tt>:
-   -O2 -march=\<your_cpu_architecture\> (e.g. -march=core2)

If you are using <b>Visual Studio</b>, you do not need to tweak any of
these settings.

\section make Build the project
After this configure step, you can build the project with your selected
build tool (e.g. by typing \c mingw32-make in the console when using
"MinGW Makefiles" as Makefile generator).
The final executable will be avaiable in the \c app
Directory. Unit tests are avaiable using the command <tt>ctest .</tt>

\section install Installation and distribution
To install the software, use the install command (the target directory can
be changed in the CMake Cache editor). More confortable is the usage of
precompiled packages that can be generated using CPack.

If you want to use the <tt>\<make\> install</tt> command, check the following
variables in the CMake Cache:
-   <tt>CMAKE_INSTALL_PREFIX</tt>: this is where the project will be installed
-   <tt>CMAKE_INSTALL_DOC</tt>: this is where the documentation will be installed
    (this can be used if you want to install the documentation in a
    seperate directory)
    Do <b>not</b> set this to an absolute path or a path outside the build
    directory (i.e. no path like ../blah) if you want to create packages.

You can use <b>CPack</b> to generate installers and other packages for
software distribution. For creation of Windows installers you have to
install the <a href="http://nsis.sourceforge.net/Main_Page">
Nullsoft Scriptable Install System</a>. CPack can also create RPM and
DEB packages for linux systems. Zip/TarGZ/Z/... archives containing
source or binary versions can also be created. You can select the
package types you want to create in the CMake Cache Editor.

To create the packages, type <tt>\<make\> package</tt> for binary
packages and <tt>\<make\> package_source</tt> for source packages.
It is recommended to use out-of-source builds if you want to create
source packages, otherwise it is possible that some temporary or
build files are compressed into the archives as well.
*/