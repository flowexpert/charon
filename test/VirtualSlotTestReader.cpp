/*  Copyright (C) 2012 Gerald Mwangi

	This file is part of Charon.

	Charon is free software: you can redistribute it and/or modify
	it under the terms of the GNU Lesser General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	Charon is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Lesser General Public License for more details.

	You should have received a copy of the GNU Lesser General Public License
	along with Charon.  If not, see <http://www.gnu.org/licenses/>.
*/
/** \file VirtualSlotTestReader.cpp
 *  Implementation of parameter class VirtualSlotTestReader.
 *  \author <a href="mailto:gerald.mwangi@gmx.de">
 *      Gerald Mwangi</a>
 *  \date 28.11.2012
 */

#include <charon-core/ParameteredObject.hxx>
#include "VirtualSlotTestReader.h"

VirtualSlotTestReader::VirtualSlotTestReader(const std::string& name) :
		ParameteredObject(
			"VirtualSlotTestReader", name,
			"<h2>Tests if the data passed to its input matches the data "
			"generated by VirtualSlotTestWriter</h2><br>"
			"Tests if the data passed to its input matches the data "
			"generated by VirtualSlotTestWriter"
		)
{

	ParameteredObject::_addInputSlot(
		integer, "integer",
		"integer",
		"int");
	ParameteredObject::_addInputSlot(
		image, "image",
		"image",
		"CImgList<T>");

}

void VirtualSlotTestReader::execute() {
	//Test if the answer is 42
	if(integer!=42)
		raise("The answer is not 42!");
	//Test image
	cimg_library::CImgList<double> imlist=image();
	if(imlist.size()!=1)
		raise("Incomplete number of images");
	cimg_library::CImg<double> im=imlist(0);
	if(im.width()!=3||im.height()!=3||im.depth()!=1)//||im.channels()!=1)
		raise("Image has incorrect dimensions!");
	for(int i=0;i<3;i++)
		for(int j=0;j<3;j++)
		{
			if((i==j&&im(i,j)!=1)||(i!=j&&im(i,j)!=0))
				raise("Image has incorrect values!");
		}

	//Test image again, with data retrieval as applied for multislots
	std::set<AbstractSlot<cimg_library::CImgList<double> >*>::const_iterator it=image.begin();
	Slot* sl=(Slot*)(*it);
	OutputSlotIntf* out=dynamic_cast<OutputSlotIntf*>(sl);
	if(!out) {
		raise(
				this->getClassName() + " : " + this->getName()
					+ " : cast of cimg_library::CImgList failed! ");
	}
	const OutputSlot<cimg_library::CImgList<double> >* temp =
		dynamic_cast<const OutputSlot<cimg_library::CImgList<double> >*>(out->getDataSlot());

	cimg_library::CImgList<double> imlist2=temp->operator ()();
	if(imlist2.size()!=1)
		raise("Incomplete number of images");
	im=imlist2(0);
	if(im.width()!=3||im.height()!=3||im.depth()!=1)//||im.channels!=1)
		raise("Image has incorrect dimensions!");
	for(int i=0;i<3;i++)
		for(int j=0;j<3;j++)
		{
			if((i==j&&im(i,j)!=1)||(i!=j&&im(i,j)!=0))
				raise("Image has incorrect values!");
		}




}

// the following functions are needed
// for class VirtualSlotTestReader to work as a charon plugin.
extern "C" virtualslottestreader_DECLDIR ParameteredObject*
		create(const std::string& name, ParameteredObject::template_type) {
	return new VirtualSlotTestReader(name);
}

extern "C" virtualslottestreader_DECLDIR void destroy(ParameteredObject* b) {
	delete b;
}

/// Report build configuration to prevent linking of incompatibel runtime libs
extern "C" virtualslottestreader_DECLDIR ParameteredObject::build_type getBuildType() {
#ifdef _DEBUG
	return ParameteredObject::DEBUG_BUILD;
#else
	return ParameteredObject::RELEASE_BUILD;
#endif
}
