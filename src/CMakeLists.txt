#files for Charon library
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include BEFORE)
SET(CHARON_CORE_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/include/${PROJECT_NAME})
SET(CHARON_FILES
	SplitStream
	StringTool
	FileTool
	AbstractData
	Parameter
	Slots
	ParameterFile
	ParameteredObject
	TypeDetector
)
SET(CHARON_GROUP)
FOREACH(CURFILE ${CHARON_FILES})
	FILE(GLOB TEMP
		${CMAKE_CURRENT_SOURCE_DIR}/${CURFILE}.cpp
		${CHARON_CORE_INCLUDE_DIR}/${CURFILE}.h
		${CHARON_CORE_INCLUDE_DIR}/${CURFILE}.hxx
	)
	LIST(APPEND CHARON_GROUP ${TEMP})
ENDFOREACH(CURFILE ${CHARON_FILES})

SET(PLUGIN_FILES
	AbstractPluginLoader.cpp
	${CHARON_CORE_INCLUDE_DIR}/AbstractPluginLoader.h
	PluginManager.cpp
	${CHARON_CORE_INCLUDE_DIR}/PluginManager.h
	${CHARON_CORE_INCLUDE_DIR}/PluginManagerInterface.h
	ExceptionHandler.cpp
	${CHARON_CORE_INCLUDE_DIR}/ExceptionHandler.h
)
IF(WIN32)
	LIST(APPEND PLUGIN_FILES
		${CHARON_CORE_INCLUDE_DIR}/WindowsPluginLoader.h
		WindowsPluginLoader.cpp
	)
ENDIF(WIN32)
IF(UNIX)
	LIST(APPEND PLUGIN_FILES
		${CHARON_CORE_INCLUDE_DIR}/UnixPluginLoader.h
		UnixPluginLoader.cpp
	)
ENDIF(UNIX)

# create libraries
ADD_LIBRARY(charon-core SHARED ${CHARON_GROUP})

SET_PROPERTY(TARGET charon-core
	PROPERTY COMPILE_DEFINITIONS CREATE_SHARED
)
ADD_LIBRARY(charon-plugins STATIC ${PLUGIN_FILES})
IF(MSVC)
	SET_PROPERTY(TARGET charon-plugins
		PROPERTY COMPILE_DEFINITIONS DLL_EXPORT
	)
ENDIF(MSVC)
TARGET_LINK_LIBRARIES(charon-plugins charon-core)
IF(UNIX)
	TARGET_LINK_LIBRARIES(charon-plugins dl)
ENDIF(UNIX)

# Configure Paths.config file
SET(CHARON_CORE_ROOT_DIR "${CMAKE_INSTALL_PREFIX}")
CONFIGURE_FILE(
	${CMAKE_CURRENT_SOURCE_DIR}/Paths.config.in
	${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Paths.config
	@ONLY
)
INSTALL(
	FILES	${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Paths.config
	DESTINATION share/${PROJECT_NAME}
	COMPONENT   libraries
)

# install library
IF(NOT EXPORT_NAME)
	SET(EXPORT_NAME ${PROJECT_NAME}-export)
ENDIF()
SET_TARGET_PROPERTIES(charon-core charon-plugins
	PROPERTIES VERSION ${${PROJECT_NAME}_VERSION})
INSTALL(
	TARGETS      charon-core charon-plugins
	EXPORT       ${EXPORT_NAME}
	RUNTIME      DESTINATION bin
	LIBRARY      DESTINATION lib${LIB_SUFFIX}
	ARCHIVE      DESTINATION lib${LIB_SUFFIX}
	COMPONENT    libraries
)

IF(NOT SKIP_EXPORT_INSTALL)
	INSTALL(
		EXPORT       ${EXPORT_NAME}
		DESTINATION  ${CONFIG_INSTALL}
		COMPONENT    libraries
	)
ENDIF()

# install header files to include directory
INSTALL(
	DIRECTORY   ${CHARON_CORE_INCLUDE_DIR}
	DESTINATION include
	COMPONENT   headers
	PATTERN ".svn" EXCLUDE
)
