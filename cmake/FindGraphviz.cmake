# - Find Graphviz by AT&T Research Labs
# Search for graphviz headers, libraries
#
# Usage:
#  FIND_PACKAGE(Graphviz[ REQUIRED][ QUIET])
#  INCLUDE_DIRECTORIES(${Graphviz_INCLUDE_DIRS})
#  ADD_EXECUTABLE(bla main.cpp)
#  TARGET_LINK_LIBRARIES(bla ${Graphviz_LIBRARIES})
#
# This sets the variables:
#  Graphviz_INCLUDE_DIRS            graphviz include directory
#  Graphviz_LIBRARY_DIRS            graphviz library directory
#  Graphviz_DOT_EXECUTABLE          graphviz dot executable
#  Graphviz_VERSION                 dot version string (major.minor.patch)
#
# For usage with Visual Studio you need 
# at least version graphviz-2.22.x.msi
# (e.g. graphviz-2.22.2.msi)
# and NOT the MinGW version!
#
# If you want to compile using MinGW use
# graphviz-mingw-2.22.x.msi
# instead!

# search for header files
FIND_PATH(Graphviz_ROOT_DIR
	NAMES			include/graphviz/gvc.h
					include/graphviz/types.h
					include/graphviz/graph.h
	PATHS			[HKEY_LOCAL_MACHINE\\SOFTWARE\\AT&T\ Research\ Labs\\Graphviz;InstallPath]
					[HKEY_LOCAL_MACHINE\\SOFTWARE\\ATT\\Graphviz;InstallPath]
					"$ENV{ProgramFiles}\\Graphviz"
					"C:\\Program Files\\Graphviz"
					/usr
					/usr/local
	DOC				"graphviz root directory"
)

SET(Graphviz_LIBRARY_DIRS ${Graphviz_ROOT_DIR}/lib)
SET(Graphviz_INCLUDE_DIRS ${Graphviz_ROOT_DIR}/include ${Graphviz_ROOT_DIR}/include/graphviz)


# search for graphviz libraries
FIND_LIBRARY(Graphviz_CDT_LIBRARY
	NAMES			cdt
	PATHS			${Graphviz_LIBRARY_DIRS}
	DOC				"graphviz container types"
    PATH_SUFFIXES   release release/lib
	NO_DEFAULT_PATH
)
FIND_LIBRARY(Graphviz_CDT_LIBRARY_DEBUG
	NAMES			cdt
	PATHS			${Graphviz_LIBRARY_DIRS}
	DOC				"graphviz container types"
    PATH_SUFFIXES   debug debug/lib
	NO_DEFAULT_PATH
)

FIND_LIBRARY(Graphviz_GRAPH_LIBRARY
	NAMES			graph
	PATHS			${Graphviz_LIBRARY_DIRS}
	DOC				"graphviz container types"
    PATH_SUFFIXES   release release/lib
	NO_DEFAULT_PATH
)
FIND_LIBRARY(Graphviz_GRAPH_LIBRARY_DEBUG
	NAMES			graph
	PATHS			${Graphviz_LIBRARY_DIRS}
	DOC				"graphviz container types"
    PATH_SUFFIXES   debug debug/lib
	NO_DEFAULT_PATH
)

FIND_LIBRARY(Graphviz_GVC_LIBRARY
	NAMES			gvc
	PATHS			${Graphviz_LIBRARY_DIRS}
	DOC				"graphviz container types"
    PATH_SUFFIXES   release release/lib
	NO_DEFAULT_PATH
)
FIND_LIBRARY(Graphviz_GVC_LIBRARY_DEBUG
	NAMES			gvc
	PATHS			${Graphviz_LIBRARY_DIRS}
	DOC				"graphviz container types"
    PATH_SUFFIXES   debug debug/lib
	NO_DEFAULT_PATH
)

# search for dot executable
FIND_PROGRAM(Graphviz_DOT_EXECUTABLE
    NAMES			dot
	PATHS			${Graphviz_ROOT_DIR}
	PATH_SUFFIXES	bin
    DOC				"Graphviz dot tool"
)

MARK_AS_ADVANCED(
	Graphviz_ROOT_DIR
	Graphviz_CDT_LIBRARY
	Graphviz_GRAPH_LIBRARY
	Graphviz_GVC_LIBRARY
	Graphviz_CDT_LIBRARY_DEBUG
	Graphviz_GRAPH_LIBRARY_DEBUG
	Graphviz_GVC_LIBRARY_DEBUG
	Graphviz_DOT_EXECUTABLE
)

# try to get graphviz version (executing dot -V)
EXECUTE_PROCESS(
	COMMAND			${Graphviz_DOT_EXECUTABLE} -V
	RESULT_VARIABLE	Graphviz_DOT_RUN_RESULT
	OUTPUT_VARIABLE	Graphviz_DOT_RUN_OUTPUT
	ERROR_VARIABLE	Graphviz_DOT_RUN_ERROR
	OUTPUT_STRIP_TRAILING_WHITESPACE
	ERROR_STRIP_TRAILING_WHITESPACE
)

SET(Graphviz_DOT_RUN_OUTPUT ${Graphviz_DOT_RUN_OUTPUT} ${Graphviz_DOT_RUN_ERROR})
IF(Graphviz_DOT_RUN_RESULT AND Graphviz_FIND_REQUIRED)
	MESSAGE(FATAL_ERROR
		" Dot executable NOT working:\n"
		"   Dot returns exit code  ${Graphviz_DOT_RUN_RESULT}\n"
		"   Dot output: ${Graphviz_DOT_RUN_OUTPUT}"
	)
ENDIF()

# parse dot output
STRING(REGEX MATCH "[0-9]+\\.[0-9]+\\.[0-9]+"
	Graphviz_VERSION "${Graphviz_DOT_RUN_OUTPUT}")
IF(NOT Graphviz_VERSION)
	# Version String like x.xx (e.g. 2.22)
	STRING(REGEX MATCH "[0-9]+\\.[0-9]+"
		Graphviz_VERSION "${Graphviz_DOT_RUN_OUTPUT}")
ENDIF()

# check if version matches
SET(Graphviz_VERSION_FINE TRUE)
IF(Graphviz_FIND_VERSION)
	IF(NOT Graphviz_VERSION)
		MESSAGE(FATAL_ERROR
			" Version parse Error:\n"
			"   Error: Graphviz version string could not be parsed!\n"
			"   Version  Output: ${Graphviz_DOT_RUN_OUTPUT}\n"
			"   Expected Output: dot - graphviz version x.xx.x(.xxxxxxxx) (xxxxxxxx.xxxx)"
		)
	ENDIF()
	SET(Graphviz_VERSION_EXPECTED
		"${Graphviz_FIND_VERSION_MAJOR}.${Graphviz_FIND_VERSION_MINOR}.${Graphviz_FIND_VERSION_PATCH}"
	)
	IF(${Graphviz_VERSION} VERSION_LESS ${Graphviz_VERSION_EXPECTED})
	  MESSAGE(SEND_ERROR
	      " Found Graphviz version is not high eanough!\n"
		  "   Version string  : ${Graphviz_VERSION}"
		  "   Version expected: ${Graphviz_VERSION_EXPECTED}"
      )
      SET(Graphviz_VERSION_FINE FALSE)
	ENDIF()
ENDIF(Graphviz_FIND_VERSION)

# result output generated by FindPackageHandleStandardArgs
SET(Graphviz_FOUND_MESSAGE "${Graphviz_DOT_EXECUTABLE} (Version ${Graphviz_VERSION})")
INCLUDE(FindPackageHandleStandardArgs)

IF(APPLE)
	# check if everything went fine
	FIND_PACKAGE_HANDLE_STANDARD_ARGS(Graphviz DEFAULT_MSG
		Graphviz_FOUND_MESSAGE
		Graphviz_GRAPH_LIBRARY
		Graphviz_ROOT_DIR
		Graphviz_CDT_LIBRARY
		Graphviz_GVC_LIBRARY
		Graphviz_DOT_EXECUTABLE
		#Disabled because checking does not work currently.
		#Graphviz_VERSION_FINE
	)
ELSE(APPLE)
	# check if everything went fine
	FIND_PACKAGE_HANDLE_STANDARD_ARGS(Graphviz DEFAULT_MSG
		Graphviz_FOUND_MESSAGE
		Graphviz_GRAPH_LIBRARY
		Graphviz_ROOT_DIR
		Graphviz_CDT_LIBRARY
		Graphviz_GVC_LIBRARY
		Graphviz_DOT_EXECUTABLE
		Graphviz_VERSION_FINE
	)
ENDIF(APPLE)

SET(Graphviz_LIBRARIES
	optimized ${Graphviz_GRAPH_LIBRARY}
	debug ${Graphviz_GRAPH_LIBRARY_DEBUG}
	optimized ${Graphviz_CDT_LIBRARY}
	debug ${Graphviz_CDT_LIBRARY_DEBUG}
	optimized ${Graphviz_GVC_LIBRARY}
	debug ${Graphviz_GVC_LIBRARY_DEBUG}
)
#MESSAGE("Graphviz libraries: ${Graphviz_LIBRARIES}")

# cleanup
IF(COMMAND unset)
    UNSET(Graphviz_DOT_RUN_RESULT)
    UNSET(Graphviz_DOT_RUN_OUTPUT)
    UNSET(Graphviz_DOT_RUN_ERROR)
    UNSET(Graphviz_FOUND_MESSAGE)
ENDIF(COMMAND unset)
