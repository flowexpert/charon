IF(INSTALL_DLLS)
	# Variable holding needed dlls
	SET(tuchulcha_QT_DLLS)
	# Qt dlls
	FIND_FILE(QT_CORE_DLL
		QtCore4.dll
		HINTS ${QT_BINARY_DIR}
		PATHS $ENV{PATH}
	)
	FIND_FILE(QT_GUI_DLL
		QtGui4.dll
		HINTS ${QT_BINARY_DIR}
		PATHS $ENV{PATH}
	)
	FIND_FILE(QT_OPENGL_DLL
		QtOpenGL4.dll
		HINTS ${QT_BINARY_DIR}
		PATHS $ENV{PATH}
	)
	FIND_FILE(QT_SVG_DLL
		QtSvg4.dll
		HINTS ${QT_BINARY_DIR}
		PATHS $ENV{PATH}
	)
	FIND_FILE(QT_TEST_DLL
		QtTest4.dll
		HINTS ${QT_BINARY_DIR}
		PATHS $ENV{PATH}
	)
	FIND_FILE(QT_NETWORK_DLL
		QtNetwork4.dll
		HINTS ${QT_BINARY_DIR}
		PATHS $ENV{PATH}
	)
	FIND_FILE(QT_PHONON_DLL
		phonon4.dll
		HINTS ${QT_BINARY_DIR}
		PATHS $ENV{PATH}
	)
	INSTALL(FILES
		${QT_CORE_DLL}
		${QT_GUI_DLL}
		${QT_OPENGL_DLL}
		${QT_SVG_DLL}
		${QT_NETWORK_DLL}
		${QT_PHONON_DLL}
		DESTINATION    bin
		COMPONENT      dlls
	)
	LIST(APPEND tuchulcha_QT_DLLS
		${QT_CORE_DLL}
		${QT_GUI_DLL}
		${QT_OPENGL_DLL}
		${QT_SVG_DLL}
		${QT_TEST_DLL}
		${QT_NETWORK_DLL}
		${QT_PHONON_DLL}
	)
	MARK_AS_ADVANCED(
		QT_CORE_DLL
		QT_GUI_DLL
		QT_OPENGL_DLL
		QT_SVG_DLL
		QT_TEST_DLL
		QT_NETWORK_DLL
		QT_PHONON_DLL
	)

	# Debug Qt libraries
	FIND_FILE(QT_CORE_DLL_DEBUG
		QtCored4.dll
		HINTS ${QT_BINARY_DIR}
		PATHS $ENV{PATH}
	)
	FIND_FILE(QT_GUI_DLL_DEBUG
		QtGuid4.dll
		HINTS ${QT_BINARY_DIR}
		PATHS $ENV{PATH}
	)
	FIND_FILE(QT_OPENGL_DLL_DEBUG
		QtOpenGLd4.dll
		HINTS ${QT_BINARY_DIR}
		PATHS $ENV{PATH}
	)
	FIND_FILE(QT_SVG_DLL_DEBUG
		QtSvgd4.dll
		HINTS ${QT_BINARY_DIR}
		PATHS $ENV{PATH}
	)
	FIND_FILE(QT_TEST_DLL_DEBUG
		QtTestd4.dll
		HINTS ${QT_BINARY_DIR}
		PATHS $ENV{PATH}
	)
	FIND_FILE(QT_NETWORK_DLL_DEBUG
		QtNetworkd4.dll
		HINTS ${QT_BINARY_DIR}
		PATHS $ENV{PATH}
	)
	FIND_FILE(QT_PHONON_DLL_DEBUG
		phonond4.dll
		HINTS ${QT_BINARY_DIR}
		PATHS $ENV{PATH}
	)
	MARK_AS_ADVANCED(
		QT_CORE_DLL_DEBUG
		QT_GUI_DLL_DEBUG
		QT_OPENGL_DLL_DEBUG
		QT_SVG_DLL_DEBUG
		QT_TEST_DLL_DEBUG
		QT_NETWORK_DLL_DEBUG
		QT_PHONON_DLL_DEBUG
	)

	INSTALL(FILES
		${QT_CORE_DLL_DEBUG}
		${QT_GUI_DLL_DEBUG}
		${QT_OPENGL_DLL_DEBUG}
		${QT_SVG_DLL_DEBUG}
		${QT_NETWORK_DLL_DEBUG}
		${QT_PHONON_DLL_DEBUG}
		DESTINATION    bin
		CONFIGURATIONS Debug
		COMPONENT      dlls
		OPTIONAL
	)
	LIST(APPEND tuchulcha_QT_DLLS
		${QT_CORE_DLL_DEBUG}
		${QT_GUI_DLL_DEBUG}
		${QT_OPENGL_DLL_DEBUG}
		${QT_SVG_DLL_DEBUG}
		${QT_TEST_DLL_DEBUG}
		${QT_NETWORK_DLL_DEBUG}
		${QT_PHONON_DLL_DEBUG}
	)
	
	IF(MSVC)
		# MSVC specific libraries (if needed)
		SET(CMAKE_INSTALL_MFC_LIBRARIES OFF)
		SET(CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_SKIP ON)
		
		# Release libraries
		SET(CMAKE_INSTALL_DEBUG_LIBRARIES OFF)
		INCLUDE(InstallRequiredSystemLibraries)
		INSTALL(FILES
			${CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS}
			DESTINATION    bin
			CONFIGURATIONS Release
			COMPONENT      dlls
		)
		
		# Debug libraries
		SET(CMAKE_INSTALL_DEBUG_LIBRARIES ON)
		INCLUDE(InstallRequiredSystemLibraries)
		INSTALL(FILES
			${CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS}
			DESTINATION    bin
			CONFIGURATIONS Debug
			COMPONENT      dlls
		)
	ENDIF(MSVC)
	IF(MINGW)
		FIND_FILE(QT_MINGWM10
			mingwm10.dll
			PATHS $ENV{PATH}
		)
		MARK_AS_ADVANCED(
			QT_MINGWM10
		)
		INSTALL(FILES
			${QT_MINGWM10}
			DESTINATION    bin
			COMPONENT      dlls
		)
	ENDIF(MINGW)
	# Variable holding additional dlls to be installed
	IF(ADDITIONAL_DLL_DEPENDS)
		INSTALL(FILES
			${ADDITIONAL_DLL_DEPENDS}
			DESTINATION    bin
			COMPONENT      dlls
		)
		MARK_AS_ADVANCED(
			ADDITIONAL_DLL_DEPENDS
		)
	ENDIF(ADDITIONAL_DLL_DEPENDS)
	SET(tuchulcha_QT_DLLS ${tuchulcha_QT_DLLS} CACHE STRING "Qt DLLs needed by Tuchulcha" FORCE)
ENDIF(INSTALL_DLLS)
